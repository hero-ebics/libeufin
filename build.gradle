// This file is in the public domain.

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    // id 'org.jetbrains.kotlin.jvm' version '1.5.30'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    // id 'signing'
}

group = 'tech.libeufin'
version = '0.9.1'

if (!JavaVersion.current().isJava11Compatible()){
    throw new GradleException(
        "This build must be run with java 11 " +
        "or later (your version is java ${JavaVersion.current()})")
}

allprojects {
    ext.set("ktor_version", "2.2.1")
    ext.set("ktor_auth_version", "1.6.8")
    ext.set("exposed_version", "0.32.1")

    repositories {
        mavenCentral()
        jcenter()
    }
}

idea {
    module {
        excludeDirs += file("frontend")
    }
}

task versionFile() {
    new File("${projectDir}/util/src/main/resources", "version.txt").text = getRootProject().version
}

task replaceVersionCli(type: Copy) {
    from file("cli/bin/libeufin-cli")
    into file("${project.buildDir}/generated/python")
    filter(ReplaceTokens, tokens: [version: getRootProject().version])
}

classes {
    dependsOn versionFile
    dependsOn replaceVersionCli
}

task dist(type: Zip) {
    dependsOn versionFile
    dependsOn replaceVersionCli
    evaluationDependsOn("nexus")
    evaluationDependsOn("sandbox")
    def topDir = "${getRootProject().name}-${getRootProject().version}"
    archiveFileName = "${topDir}.zip"
    subprojects.each {
        if (it.name == "nexus" || it.name == "sandbox") {
            Task t = it.tasks.getByName("installShadowDist")
            dependsOn(t) // invokes the task 't'
        }
    }
    from("nexus/build/install/nexus-shadow") {
        include("**/libeufin-nexus")
        include("**/*.jar")
    }
    from("sandbox/build/install/sandbox-shadow") {
        include("**/libeufin-sandbox")
        include("**/*.jar")
    }
    from("${project.buildDir}/generated/python") {
      include("libeufin-cli")
      rename { "bin/libeufin-cli" }
    }
    into(topDir)
}

task libeufinSrcJar(type: Jar) {
    archiveClassifier = "sources"
    from project("sandbox").sourceSets.main.java.srcDirs
    from project("nexus").sourceSets.main.java.srcDirs
    from("sandbox") {
        include("build.gradle")
        into("sandbox")
    }
    from("nexus") {
        include("build.gradle")
        into("nexus")
    }
    from "build.gradle"
    from "settings.gradle"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'libeufin'
            // from components.java
            artifact libeufinSrcJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'libeufin'
                description = 'Implementation of EBICS'
                url = 'https://libeufin.tech/'
                licenses {
                    license {
                        name = 'GNU Affero General Public License, Version 3.0+'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git://git.taler.net/libeufin.git'
                    developerConnection = 'scm:git:ssh://git.taler.net/libeufin.git'
                    url = 'https://git.taler.net/libeufin.git/'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

//signing {
//    sign publishing.publications.mavenJava
//}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
